package game;

import java.io.IOException;
import javax.swing.JFrame;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 * Graphical User Interface for this game. Implements ChangeListener because it
 * displays the Timer and the Score for the current World.
 *
 * @author Giuseppe
 */
public class Gui extends javax.swing.JPanel implements ChangeListener {

    /**
     * Creates new form GUI.
     */
    private final JFrame frame;
    private final Game game;
    private Timer timer;
    private Score score;

    /**
     *
     * @param frame the frame where this panel will be placed
     * @param game the current game
     * @param timer the timer to display
     */
    public Gui(JFrame frame, Game game, Timer timer) {
        this.game = game;
        this.frame = frame;
        this.timer = timer;
        this.score = game.getLevel().getScore();
        initComponents();
    }

    /**
     *
     * @param timer a new timer to be displayed
     * @param game the current game
     */
    public void resetUi(Timer timer, Game game) {
        this.timer = timer;
        this.score = game.getLevel().getScore();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        restartButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        time = new javax.swing.JLabel();
        timerLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        scoreBar = new javax.swing.JProgressBar();
        levelNumber = new javax.swing.JLabel();

        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(1024, 35));
        setName("InformationBar"); // NOI18N
        setPreferredSize(new java.awt.Dimension(1000, 35));

        restartButton.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 14)); // NOI18N
        restartButton.setText("Restart");
        restartButton.setMaximumSize(new java.awt.Dimension(69, 15));
        restartButton.setMinimumSize(new java.awt.Dimension(69, 15));
        restartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restartButtonActionPerformed(evt);
            }
        });

        exitButton.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 14)); // NOI18N
        exitButton.setText("Exit");
        exitButton.setMaximumSize(new java.awt.Dimension(69, 23));
        exitButton.setMinimumSize(new java.awt.Dimension(69, 23));
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        time.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 14)); // NOI18N
        time.setLabelFor(time);
        time.setText(timer.getCurrentTime());

        timerLabel.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 14)); // NOI18N
        timerLabel.setText("Time:");

        jLabel1.setFont(timerLabel.getFont());
        jLabel1.setText("Score:");

        scoreBar.setForeground(new java.awt.Color(255, 153, 0));
        scoreBar.setFocusable(false);
        scoreBar.setOpaque(true);

        levelNumber.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 14)); // NOI18N
        levelNumber.setText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(levelNumber)
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scoreBar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(192, 192, 192)
                .addComponent(timerLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(time)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 201, Short.MAX_VALUE)
                .addComponent(restartButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.CENTER, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                        .addComponent(jLabel1)
                        .addComponent(levelNumber))
                    .addGroup(javax.swing.GroupLayout.Alignment.CENTER, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                        .addComponent(scoreBar, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.CENTER, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                .addComponent(time, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(restartButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(timerLabel, javax.swing.GroupLayout.Alignment.CENTER))))
                .addGap(5, 5, 5))
        );

        scoreBar.setMaximum(30);
        scoreBar.setString("0/3");
        scoreBar.setStringPainted(true);

        getAccessibleContext().setAccessibleName("");
    }// </editor-fold>//GEN-END:initComponents

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        // TODO add your handling code here:
        try {
            RecordWriter.sessionFinished();
        } catch (IOException ex) {
            System.err.println("Impossible to close the writing session.");
        }
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void restartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restartButtonActionPerformed
        // TODO add your handling code here:
        game.startLevel();
    }//GEN-LAST:event_restartButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel levelNumber;
    private javax.swing.JButton restartButton;
    private javax.swing.JProgressBar scoreBar;
    private javax.swing.JLabel time;
    private javax.swing.JLabel timerLabel;
    // End of variables declaration//GEN-END:variables
    /**
     * Updates the interface.
     *
     * @param e a description of the event
     */
    @Override
    public void stateChanged(ChangeEvent e) {
        this.time.setText(timer.getCurrentTime());
        this.levelNumber.setText("Level: " + game.getLevel().getLevelNumber());
        this.scoreBar.setValue(score.getScore());
        this.scoreBar.setString(score.getScore() / 10 + "/3");
    }
}
